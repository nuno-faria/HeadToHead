# state - map with the observable state
# data - map to store data

# files to include (relative path)
# included expressions/nodes are overwritten with the declared here if repeated
include:
  - util.yaml


#matched strings in a node's action and decision gets replaced by the repective value
expressions:
  wait_pos_x: 3
  ball_range_to_jump_max_x: 2
  ball_range_to_jump_max_y: 2
  min_distance_from_ball_x: 0.4 # so it shoots the ball left/right instead of up
  horizontal_speed: 2
  max_ball_y_to_follow: 0   #follow ball if ball_y < k
  max_ball_xvel_to_follow: 6   #follow ball if ball_xvel < k
  max_ball_yvel_to_follow: -4  #follow ball if ball_xvel < k
  ball_in_self_area: state["ballPosX"] > 0 # can be code too

  # can also refer to state/data variables
  # ex: ballPosX: state["ballPosX"]
  # ex: x_dist_to_ball: abs(state["selfPosX"] - state["ballPosX"])
  # ex:  custom_x: data["_x"]
  #       NODE:
  #         action: custom_x = ballPosX


nodes:
  # root
  ROOT:
    info: Ball in player's area? # documentation to be drawn in the graph, not needed
    decision: ball_in_self_area # ball in players area
    yes: GO_BALL
    no: GO_WAIT_POS

  # find where to go (follow the ball or go to the fall prediction)
  GO_BALL:
    info: Ball state is appropriate to follow?
    decision: >-
      state["ballPosY"] < max_ball_y_to_follow ||
      state["ballVelX"] < max_ball_xvel_to_follow ||
      state["ballVelY"] < max_ball_yvel_to_follow
    yes: FOLLOW_BALL; SPRINT; JUMP_TO_BALL
    no: GO_PREDICT_FALL; SPRINT; JUMP_TO_BALL

  # move to the ball
  FOLLOW_BALL:
    info: Not close enough to the ball?
    action: data["_x"] = state["ballPosX"] # to be used in MOVE_TO_CUSTOM_POS
    decision: abs(state["selfPosX"] - state["ballPosX"]) > min_distance_from_ball_x
    yes: MOVE_TO_CUSTOM_POS
    #if 'no' it does nothing 

  # jump to ball
  JUMP_TO_BALL:
    info: Player in range of ball?
    decision: >-
      abs(state["selfPosX"] - state["ballPosX"]) < ball_range_to_jump_max_x && 
      abs(state["selfPosY"] - state["ballPosY"]) < ball_range_to_jump_max_y
    yes: JUMP

  # move to the wait pos
  GO_WAIT_POS:
    info: Go to the wait position
    action: data["_x"] = wait_pos_x
    yes: MOVE_TO_CUSTOM_POS # yes without decision is always executed

  # move to the position where the ball is most likely to fall
  GO_PREDICT_FALL:
    info: Go to where the ball is expected to fall
    # using the line equation
    action: >-
        data["_y"] = floor_y;
        data["_m"] = state["ballVelY"] / state["ballVelX"];
        data["_b"] = state["ballPosY"] - data["_m"] * state["ballPosX"];
        data["_x"] = (data["_y"] - data["_b"]) / data["_m"];
        data["_x"] = data["_x"] > wall_x ? wall_x - (data["_x"] - wall_x) : data["_x"];
    yes: MOVE_TO_CUSTOM_POS
